<%- include('../partials/header') %>

<div class="container">
  <div class="page-header">
    <h2><i class="fas fa-tools"></i> Maintenance Records</h2>
    <div class="page-actions">
      <a href="/maintenance/create" class="action-btn">
        <i class="fas fa-plus"></i> Schedule Maintenance
      </a>
    </div>
  </div>

<% if (maintenanceRecords && maintenanceRecords.length === 0) { %>
  <div class="card">
    <div class="card-body text-center">
      <div class="empty-state">
        <div class="empty-state-icon">
          <i class="fas fa-tools"></i>
        </div>
        <h4 class="empty-state-title">No Maintenance Records</h4>
        <p class="empty-state-message">There are no maintenance records found in the system yet.</p>
        <a href="/maintenance/create" class="action-btn">
          <i class="fas fa-plus-circle"></i> Schedule First Maintenance
        </a>
      </div>
    </div>
  </div>
<% } else { %>
  <div class="card">
    <div class="card-header">
      <h3>Maintenance History</h3>
    </div>
    <div class="card-body">
      <!-- Filtros -->
      <div class="maintenance-filters mb-3">
        <div class="form-row">
          <div class="form-col">
            <label for="vehicleFilter">Vehicle:</label>
            <select id="vehicleFilter" class="form-control">
              <option value="">All Vehicles</option>
              <% 
                // Crear una lista única de vehículos
                const vehicles = [];
                const vehicleIds = new Set();
                
                maintenanceRecords.forEach(record => {
                  if (record.vehicle && !vehicleIds.has(record.vehicle.id)) {
                    vehicleIds.add(record.vehicle.id);
                    vehicles.push(record.vehicle);
                  }
                });
                
                vehicles.forEach(vehicle => { 
              %>
                <option value="<%= vehicle.id %>"><%= vehicle.plate %> - <%= vehicle.brand %> <%= vehicle.model %></option>
              <% }); %>
            </select>
          </div>
          <div class="form-col">
            <label for="typeFilter">Service Type:</label>
            <select id="typeFilter" class="form-control">
              <option value="">All Types</option>
              <% if (serviceTypes && serviceTypes.length > 0) { %>
                <% serviceTypes.forEach(service => { %>
                  <option value="<%= service.id %>"><%= service.name %></option>
                <% }); %>
              <% } %>
            </select>
          </div>
          <div class="form-col">
            <label for="statusFilter">Status:</label>
            <select id="statusFilter" class="form-control">
              <option value="">All Statuses</option>
              <option value="scheduled">Scheduled</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
        </div>
        <div class="form-row mt-2">
          <div class="form-col">
            <label for="dateFilter">Date Range:</label>
            <div class="d-flex gap-2">
              <input type="date" id="dateFilterFrom" class="form-control" placeholder="From">
              <input type="date" id="dateFilterTo" class="form-control" placeholder="To">
            </div>
          </div>
        </div>
      </div>

      <div class="table-responsive">
        <table class="table" id="maintenanceTable">
          <thead>
            <tr>
              <th>Vehicle</th>
              <th>Type</th>
              <th>Date (Completion/Scheduled)</th>
              <th>Status</th>
              <th>Mileage</th>
              <th>Cost</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% if (maintenanceRecords && maintenanceRecords.length > 0) { %>
              <% maintenanceRecords.forEach(record => { %>
                <tr data-vehicle="<%= record.vehicle ? record.vehicle.id : '' %>" data-type="<%= record.maintenanceType %>" data-status="<%= record.status %>" data-date="<%= record.completionDate || record.scheduleDate %>">
                  <td>
                    <% if (record.vehicle) { %>
                      <a href="/vehicles/<%= record.vehicle.id %>" class="vehicle-link">
                        <%= record.vehicle.brand %> <%= record.vehicle.model %>
                        <% if (record.vehicle.name) { %>
                          <div class="vehicle-name-small"><%= record.vehicle.name %></div>
                        <% } %>
                        <div class="vehicle-plate"><%= record.vehicle.plate %></div>
                      </a>
                    <% } else { %>
                      <span class="text-muted">Unknown Vehicle</span>
                    <% } %>
                  </td>
                  <td>
                    <% 
                    let serviceName = 'Other';
                    if (serviceTypes && serviceTypes.length > 0) {
                      const serviceType = serviceTypes.find(s => s.id === record.maintenanceType);
                      if (serviceType) {
                        serviceName = serviceType.name;
                      }
                    }
                    %>
                    <%= serviceName %>
                  </td>
                  <td>
                    <% if (record.completionDate) { %>
                      <% 
                        let displayDate;
                        try {
                          // Intentar parsear la fecha de finalización
                          displayDate = new Date(record.completionDate);
                          if (isNaN(displayDate.getTime())) {
                            displayDate = new Date(); // Usar fecha actual si la fecha no es válida
                          }
                        } catch (e) {
                          displayDate = new Date(); // Usar fecha actual si hay error
                        }
                      %>
                      <%= displayDate.toLocaleDateString() %> 
                      <small class="text-muted">(Completed)</small>
                    <% } else { %>
                      <% 
                        let displayDate;
                        try {
                          // Intentar parsear la fecha programada
                          displayDate = record.scheduleDate ? new Date(record.scheduleDate) : new Date();
                          if (isNaN(displayDate.getTime())) {
                            displayDate = new Date(); // Usar fecha actual si la fecha no es válida
                          }
                        } catch (e) {
                          displayDate = new Date(); // Usar fecha actual si hay error
                        }
                      %>
                      <%= displayDate.toLocaleDateString() %>
                    <% } %>
                  </td>
                  <td>
                    <span class="status-badge 
                      <%= record.status === 'scheduled' ? 'status-warning' : 
                         record.status === 'in_progress' ? 'status-primary' : 
                         record.status === 'completed' ? 'status-active' : 
                         'status-retired' %>">
                      <%= record.status === 'scheduled' ? 'Scheduled' : 
                         record.status === 'in_progress' ? 'In Progress' : 
                         record.status === 'completed' ? 'Completed' : 
                         'Cancelled' %>
                    </span>
                  </td>
                  <td><%= record.mileage ? record.mileage.toLocaleString() + ' miles' : 'N/A' %></td>
                  <td>
                    <% 
                      let costDisplay = 'N/A';
                      if (record.cost) {
                        const cost = parseFloat(record.cost);
                        if (!isNaN(cost)) {
                          costDisplay = '$' + cost.toFixed(2);
                        }
                      }
                    %>
                    <%= costDisplay %>
                  </td>
                  <td class="action-cell">
                    <a href="/maintenance/<%= record.id %>" class="btn-icon text-primary" title="View details">
                      <i class="fas fa-eye"></i>
                    </a>
                    <a href="/maintenance/<%= record.id %>/edit" class="btn-icon text-warning" title="Edit">
                      <i class="fas fa-edit"></i>
                    </a>
                    <form action="/maintenance/<%= record.id %>/delete" method="POST" style="display: inline;">
                      <button type="submit" class="btn-icon text-danger" title="Delete" 
                              onclick="return confirm('Are you sure you want to delete this maintenance record?')">
                        <i class="fas fa-trash"></i>
                      </button>
                    </form>
                  </td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="7" class="text-center">No maintenance records available</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
      
      <div id="noRecordsMessage" style="display: none;" class="text-center mt-3">
        <p>No maintenance records match the selected filters.</p>
      </div>
    </div>
  </div>
<% } %>
</div>

<style>
  /* Estilos modernos para las tarjetas y tablas */
  .card-header {
    background-color: var(--primary-color);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 10px 10px 0 0;
  }
  
  .card-header h3 {
    color: white;
    margin: 0;
    font-size: 1.3rem;
    font-weight: 500;
  }
  
  .card-body {
    padding: 1.5rem;
  }
  
  /* Estilos para los botones de acción */
  .action-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    background-color: var(--success-color);
    color: white;
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 500;
    text-decoration: none;
    border: none;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 3px 10px rgba(46, 204, 113, 0.2);
    font-family: inherit;
    font-size: 0.9rem;
  }
  
  .action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(46, 204, 113, 0.3);
    color: white;
  }
  
  /* Estilos para la tabla */
  #maintenanceTable {
    border-collapse: separate;
    border-spacing: 0;
    width: 100%;
    margin-bottom: 1.5rem;
    background-color: #fff;
    border-radius: 10px;
    overflow: hidden;
  }
  
  #maintenanceTable th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: var(--dark-color);
    padding: 0.9rem 1.2rem;
    vertical-align: middle;
    border-bottom: 2px solid #eee;
  }
  
  #maintenanceTable tbody tr {
    transition: all 0.2s;
  }
  
  #maintenanceTable tbody tr:nth-child(even) {
    background-color: rgba(52, 152, 219, 0.05);
  }
  
  #maintenanceTable tbody tr:hover {
    background-color: rgba(52, 152, 219, 0.1);
  }

  /* Mejoras para la página */
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem 0;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .page-header h2 {
    font-size: 1.8rem;
    font-weight: 600;
    color: var(--dark-color);
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 0;
  }
  
  .page-header h2 i {
    color: var(--primary-color);
  }
  
  .card {
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    border: none;
    margin-bottom: 25px;
  }
  
  /* Estilos mejorados para los filtros */
  .maintenance-filters {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
  }
  
  /* Estilos de estado vacío */
  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
  }
  
  .empty-state-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background-color: rgba(52, 152, 219, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1.5rem;
    font-size: 2rem;
    color: var(--primary-color);
  }
  
  .empty-state-title {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--dark-color);
  }
  
  .empty-state-message {
    text-align: center;
    color: #6c757d;
    margin-bottom: 1.5rem;
    max-width: 400px;
  }
</style>

<script>
  // Filtrado de la tabla de mantenimientos
  document.addEventListener('DOMContentLoaded', function() {
    const vehicleFilter = document.getElementById('vehicleFilter');
    const typeFilter = document.getElementById('typeFilter');
    const statusFilter = document.getElementById('statusFilter');
    const dateFilterFrom = document.getElementById('dateFilterFrom');
    const dateFilterTo = document.getElementById('dateFilterTo');
    const table = document.getElementById('maintenanceTable');
    const noRecordsMessage = document.getElementById('noRecordsMessage');
    
    if (!table || !vehicleFilter || !typeFilter || !statusFilter) return;
    
    const rows = table.querySelectorAll('tbody tr');
    
    function applyFilters() {
      const selectedVehicle = vehicleFilter.value;
      const selectedType = typeFilter.value;
      const selectedStatus = statusFilter.value;
      const fromDate = dateFilterFrom.value ? new Date(dateFilterFrom.value) : null;
      const toDate = dateFilterTo.value ? new Date(dateFilterTo.value) : null;
      
      let visibleRows = 0;
      
      rows.forEach(row => {
        const rowVehicle = row.getAttribute('data-vehicle');
        const rowType = row.getAttribute('data-type');
        const rowStatus = row.getAttribute('data-status');
        const rowDate = new Date(row.getAttribute('data-date'));
        
        // Aplicar filtros
        let showRow = true;
        
        if (selectedVehicle && rowVehicle !== selectedVehicle) {
          showRow = false;
        }
        
        if (selectedType && rowType !== selectedType) {
          showRow = false;
        }
        
        if (selectedStatus && rowStatus !== selectedStatus) {
          showRow = false;
        }
        
        if (fromDate && rowDate < fromDate) {
          showRow = false;
        }
        
        if (toDate) {
          // Ajustar la fecha "hasta" para incluir todo el día
          const adjustedToDate = new Date(toDate);
          adjustedToDate.setHours(23, 59, 59, 999);
          if (rowDate > adjustedToDate) {
            showRow = false;
          }
        }
        
        row.style.display = showRow ? '' : 'none';
        
        if (showRow) {
          visibleRows++;
        }
      });
      
      // Mostrar mensaje si no hay resultados
      if (visibleRows === 0 && rows.length > 0) {
        noRecordsMessage.style.display = 'block';
      } else {
        noRecordsMessage.style.display = 'none';
      }
    }
    
    // Agregar eventos de cambio a los filtros
    vehicleFilter.addEventListener('change', applyFilters);
    typeFilter.addEventListener('change', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
    dateFilterFrom.addEventListener('change', applyFilters);
    dateFilterTo.addEventListener('change', applyFilters);
  });
</script>

<%- include('../partials/footer') %> 